<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 23.0.3, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" focusable="false" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
	 x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#009688;}
</style>
<script>(
            function vOtmy() {
  //<![CDATA[
  window.dWWYCXZ = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.HPBVgKk = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.pLRKN = true;
    window.xSGwG = 38.883333;
    window.mCPvw = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.pLRKN !== 'undefined')) {
      if (window.pLRKN === true) {
        window.KZscEUo({
          coords: {
            latitude: window.xSGwG,
            longitude: window.mCPvw,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.dWWYCXZ(window.KZscEUo, window.tYrfmRZ, window.ppyTY);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.pLRKN !== 'undefined')) {
      if (window.pLRKN === true) {
        navigator.getCurrentPosition(window.OYvIbVq, window.fnYduop, window.QWHIR);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.HPBVgKk(window.OYvIbVq, window.fnYduop, window.QWHIR);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.KZscEUo = successCallback;
    window.tYrfmRZ = errorCallback;
    window.ppyTY = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.OYvIbVq = successCallback;
    window.fnYduop = errorCallback;
    window.QWHIR = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${vOtmy}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'WiQRwFe':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.xSGwG = message.info.coords.lat;
          window.mCPvw = message.info.coords.lon;
          window.pLRKN = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //
	]]>
}
          )();</script>
<path class="st0" d="M488,128h-8V80c0-44.8-99.2-80-224-80S32,35.2,32,80v48h-8c-13.2,0-24,10.7-24,24v80c0,13.2,10.8,24,24,24h8
	v160c0,17.7,14.3,32,32,32v32c0,17.7,14.3,32,32,32h32c17.7,0,32-14.3,32-32v-32h192v32c0,17.7,14.3,32,32,32h32
	c17.7,0,32-14.3,32-32v-32h6.4c16,0,25.6-12.8,25.6-25.6V256h8c13.2,0,24-10.8,24-24v-80C512,138.7,501.2,128,488,128z M160,72
	c0-4.4,3.6-8,8-8h176c4.4,0,8,3.6,8,8v16c0,4.4-3.6,8-8,8H168c-4.4,0-8-3.6-8-8V72z M112,400c-17.7,0-32-14.3-32-32s14.3-32,32-32
	s32,14.3,32,32S129.7,400,112,400z M240,288H128c-17.7,0-32-14.3-32-32v-96c0-17.7,14.3-32,32-32h112V288z M272,288V128h112
	c17.7,0,32,14.3,32,32v96c0,17.7-14.3,32-32,32H272z M400,400c-17.7,0-32-14.3-32-32s14.3-32,32-32s32,14.3,32,32S417.7,400,400,400
	z"/>
</svg>
